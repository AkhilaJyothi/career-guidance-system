{"ast":null,"code":"const express = require(\"express\");\nconst multer = require(\"multer\");\nconst pdfParse = require(\"pdf-parse\");\nconst router = express.Router();\nconst upload = multer();\n\n// Define roles and required skills\nconst rolesData = [{\n  role: \"Software Developer\",\n  skills: [\"Java\", \"React\", \"Node.js\", \"API\", \"Git\"]\n}, {\n  role: \"Data Scientist\",\n  skills: [\"Python\", \"AI\", \"Machine Learning\", \"TensorFlow\", \"Data Analysis\"]\n}, {\n  role: \"Web Developer\",\n  skills: [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Bootstrap\"]\n}];\nrouter.post(\"/\", upload.single(\"resume\"), async (req, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({\n        error: \"No file uploaded\"\n      });\n    }\n\n    // Extract text from resume\n    const data = await pdfParse(req.file.buffer);\n    const resumeText = data.text.toLowerCase();\n    let bestMatch = {\n      role: null,\n      matchedSkills: [],\n      jobFitScore: 0\n    };\n    rolesData.forEach(({\n      role,\n      skills\n    }) => {\n      let matchedSkills = skills.filter(skill => resumeText.includes(skill.toLowerCase()));\n      let jobFitScore = matchedSkills.length / skills.length * 100;\n      if (jobFitScore > bestMatch.jobFitScore) {\n        bestMatch = {\n          role,\n          matchedSkills,\n          jobFitScore\n        };\n      }\n    });\n    let confidenceScore = bestMatch.jobFitScore >= 80 ? \"High\" : bestMatch.jobFitScore >= 50 ? \"Medium\" : \"Low\";\n    res.json({\n      role: bestMatch.role || \"No Match Found\",\n      matchedSkills: bestMatch.matchedSkills,\n      jobFitScore: bestMatch.jobFitScore.toFixed(2) + \"%\",\n      confidenceScore\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      error: \"Error analyzing resume\"\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","multer","pdfParse","router","Router","upload","rolesData","role","skills","post","single","req","res","file","status","json","error","data","buffer","resumeText","text","toLowerCase","bestMatch","matchedSkills","jobFitScore","forEach","filter","skill","includes","length","confidenceScore","toFixed","console","module","exports"],"sources":["C:/Users/jyoth/career-guidance-system/frontend/src/components/ResumeScreener.js"],"sourcesContent":["const express = require(\"express\");\r\nconst multer = require(\"multer\");\r\nconst pdfParse = require(\"pdf-parse\");\r\n\r\nconst router = express.Router();\r\nconst upload = multer();\r\n\r\n// Define roles and required skills\r\nconst rolesData = [\r\n    { role: \"Software Developer\", skills: [\"Java\", \"React\", \"Node.js\", \"API\", \"Git\"] },\r\n    { role: \"Data Scientist\", skills: [\"Python\", \"AI\", \"Machine Learning\", \"TensorFlow\", \"Data Analysis\"] },\r\n    { role: \"Web Developer\", skills: [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Bootstrap\"] },\r\n];\r\n\r\nrouter.post(\"/\", upload.single(\"resume\"), async (req, res) => {\r\n    try {\r\n        if (!req.file) {\r\n            return res.status(400).json({ error: \"No file uploaded\" });\r\n        }\r\n\r\n        // Extract text from resume\r\n        const data = await pdfParse(req.file.buffer);\r\n        const resumeText = data.text.toLowerCase();\r\n\r\n        let bestMatch = { role: null, matchedSkills: [], jobFitScore: 0 };\r\n\r\n        rolesData.forEach(({ role, skills }) => {\r\n            let matchedSkills = skills.filter(skill => resumeText.includes(skill.toLowerCase()));\r\n            let jobFitScore = (matchedSkills.length / skills.length) * 100;\r\n\r\n            if (jobFitScore > bestMatch.jobFitScore) {\r\n                bestMatch = { role, matchedSkills, jobFitScore };\r\n            }\r\n        });\r\n\r\n        let confidenceScore = bestMatch.jobFitScore >= 80 ? \"High\" :\r\n                              bestMatch.jobFitScore >= 50 ? \"Medium\" : \"Low\";\r\n\r\n        res.json({\r\n            role: bestMatch.role || \"No Match Found\",\r\n            matchedSkills: bestMatch.matchedSkills,\r\n            jobFitScore: bestMatch.jobFitScore.toFixed(2) + \"%\",\r\n            confidenceScore,\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: \"Error analyzing resume\" });\r\n    }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAW,CAAC;AAErC,MAAMG,MAAM,GAAGJ,OAAO,CAACK,MAAM,CAAC,CAAC;AAC/B,MAAMC,MAAM,GAAGJ,MAAM,CAAC,CAAC;;AAEvB;AACA,MAAMK,SAAS,GAAG,CACd;EAAEC,IAAI,EAAE,oBAAoB;EAAEC,MAAM,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK;AAAE,CAAC,EAClF;EAAED,IAAI,EAAE,gBAAgB;EAAEC,MAAM,EAAE,CAAC,QAAQ,EAAE,IAAI,EAAE,kBAAkB,EAAE,YAAY,EAAE,eAAe;AAAE,CAAC,EACvG;EAAED,IAAI,EAAE,eAAe;EAAEC,MAAM,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,WAAW;AAAE,CAAC,CACzF;AAEDL,MAAM,CAACM,IAAI,CAAC,GAAG,EAAEJ,MAAM,CAACK,MAAM,CAAC,QAAQ,CAAC,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC1D,IAAI;IACA,IAAI,CAACD,GAAG,CAACE,IAAI,EAAE;MACX,OAAOD,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAmB,CAAC,CAAC;IAC9D;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAMf,QAAQ,CAACS,GAAG,CAACE,IAAI,CAACK,MAAM,CAAC;IAC5C,MAAMC,UAAU,GAAGF,IAAI,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC;IAE1C,IAAIC,SAAS,GAAG;MAAEf,IAAI,EAAE,IAAI;MAAEgB,aAAa,EAAE,EAAE;MAAEC,WAAW,EAAE;IAAE,CAAC;IAEjElB,SAAS,CAACmB,OAAO,CAAC,CAAC;MAAElB,IAAI;MAAEC;IAAO,CAAC,KAAK;MACpC,IAAIe,aAAa,GAAGf,MAAM,CAACkB,MAAM,CAACC,KAAK,IAAIR,UAAU,CAACS,QAAQ,CAACD,KAAK,CAACN,WAAW,CAAC,CAAC,CAAC,CAAC;MACpF,IAAIG,WAAW,GAAID,aAAa,CAACM,MAAM,GAAGrB,MAAM,CAACqB,MAAM,GAAI,GAAG;MAE9D,IAAIL,WAAW,GAAGF,SAAS,CAACE,WAAW,EAAE;QACrCF,SAAS,GAAG;UAAEf,IAAI;UAAEgB,aAAa;UAAEC;QAAY,CAAC;MACpD;IACJ,CAAC,CAAC;IAEF,IAAIM,eAAe,GAAGR,SAAS,CAACE,WAAW,IAAI,EAAE,GAAG,MAAM,GACpCF,SAAS,CAACE,WAAW,IAAI,EAAE,GAAG,QAAQ,GAAG,KAAK;IAEpEZ,GAAG,CAACG,IAAI,CAAC;MACLR,IAAI,EAAEe,SAAS,CAACf,IAAI,IAAI,gBAAgB;MACxCgB,aAAa,EAAED,SAAS,CAACC,aAAa;MACtCC,WAAW,EAAEF,SAAS,CAACE,WAAW,CAACO,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;MACnDD;IACJ,CAAC,CAAC;EAEN,CAAC,CAAC,OAAOd,KAAK,EAAE;IACZgB,OAAO,CAAChB,KAAK,CAACA,KAAK,CAAC;IACpBJ,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAyB,CAAC,CAAC;EAC7D;AACJ,CAAC,CAAC;AAEFiB,MAAM,CAACC,OAAO,GAAG/B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}